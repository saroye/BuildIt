package com.scout.backend.Controller;

import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.apache.logging.log4j.LogManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.relational.core.mapping.Table;
import org.springframework.boot.configurationprocessor.json.JSONException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.JsonObject;

import com.scout.backend.Repositories.PostingRepository;
import com.scout.backend.Repositories.UserRepository;
import com.scout.backend.models.Postings;
import com.scout.backend.models.User;


//import org.springframework.web.bind.annotation.RestController;

@RestController
//class SpringJava4sController {
//
// @RequestMapping("/java4s-spring-boot-ex-tomcat")
// public String customerInformation() {
//      return "Hey, I am from external tomcat";
// }
//}

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired 
  // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
  @Autowired
  private PostingRepository postingRepository;
  private static final org.apache.logging.log4j.Logger logU = LogManager.getLogger(UserRepository.class);
  private static final org.apache.logging.log4j.Logger logP = LogManager.getLogger(PostingRepository.class);
  
  @RequestMapping(method = RequestMethod.POST, path = "/user/new")
  public String saveOwner(User u) {
      userRepository.save(u);
      return "New Owner "+ u.getFirstName() + " Saved";
  }
  
//  @RequestMapping(method = RequestMethod.POST, path = "/postings/new")
//  public String savePost(Postings p) {
//	  postingRepository.save(p);
//	  return "New Post " + p.getProjectName() + " Saved";
//  }

//  @RequestMapping(method = RequestMethod.GET, path = "/user/getId")
//  public Collection<user> findOwnerById(@PathVariable("getId") int id) {
//	  	logU.info("Entered into Controller Layer");
//	  	Collection<user> results = userRepository.findById(id);
//	  	return results;
//  }

  
  @RequestMapping(method= RequestMethod.GET, path = "/users")
  public List<User> getallUsers() {
	logU.info("Entered into Controller Layer");
	List<User> results = (List<User>) userRepository.findAll();
	logU.info("Number of records fetched:"+ results.size());
	return results;
		  
  }
  
  @RequestMapping(method= RequestMethod.GET, path = "/email/{email}")
  public String findEmail(@PathVariable("email") String email) throws JSONException {
	  logU.info("Enter into Controller Layer");
	  Optional<User> results = (Optional<User>) userRepository.findById(email);
	  User n  = results.get();
	  JsonObject person = new JsonObject();
	  person.addProperty("email", n.getEmail());
	  person.addProperty("password", n.getPassword());
	  return person.toString();
  }
  
  
  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String firstName, @RequestParam String lastName
      , @RequestParam String email, @RequestParam String password, @RequestParam String phone) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
	
    User n = new User();
    n.setFirstName(firstName);
    n.setLastName(lastName);
    n.setEmail(email);
    n.setPassword(password);
    n.setPhoneNumber(phone);
    userRepository.save(n);
    return "Saved";
  }
  
  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
  
  @PostMapping(path="/addpost")
  public @ResponseBody String addNewPost(@RequestParam Date date,
		  @RequestParam String projectname, 
		  @RequestParam String projectdescription, @RequestParam String neededroles,
		  @RequestParam String compensation, @RequestParam User user) {
	  Postings p = new Postings();
	  p.setDate();
	  p.setProjectName(projectname);
	  p.setProjectDescription(projectdescription);
	  p.setNeededRoles(neededroles);
	  p.setCompensation(compensation);
	  postingRepository.save(p);
	  return "Saved";
  }
  
  @RequestMapping(method= RequestMethod.GET, path="/allposts")
  public List<Postings> getAllPosts(){
	  logP.info("Entered into Controller Layer");
	  List<Postings> val = (List<Postings>) postingRepository.findAll();
	  logP.info("Number of records fetched:"+ val.size());
	  return val;
  }
  
  @GetMapping(path="/allpostings")
  public @ResponseBody Iterable<Postings> getAllPostings() {
    // This returns a JSON or XML with the users
    return postingRepository.findAll();
  }
}