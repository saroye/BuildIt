package com.scout.backend.Controller;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.zip.DataFormatException;
import java.util.zip.Deflater;
import java.util.zip.Inflater;

import org.apache.logging.log4j.LogManager;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.relational.core.mapping.Table;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity.BodyBuilder;
import org.springframework.http.ResponseEntity;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.boot.configurationprocessor.json.JSONException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.google.gson.JsonObject;
import com.scout.backend.Repositories.ImageRepository;
import com.scout.backend.Repositories.PostingRepository;
import com.scout.backend.Repositories.UserRepository;
import com.scout.backend.Configuration.LoginObject;
import com.scout.backend.Models.Messenger;
import com.scout.backend.Models.Postings;
import com.scout.backend.Models.User;
import com.scout.backend.Models.imageModel;




//import org.springframework.web.bind.annotation.RestController;

@RestController
//class SpringJava4sController {
//
// @RequestMapping("/java4s-spring-boot-ex-tomcat")
// public String customerInformation() {
//      return "Hey, I am from external tomcat";
// }
//}

@Controller // This means that this class is a Controller
@RequestMapping(path="/home") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired 
  // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
  @Autowired
  private PostingRepository postingRepository;
  private static final org.apache.logging.log4j.Logger logU = LogManager.getLogger(UserRepository.class);
  private static final org.apache.logging.log4j.Logger logP = LogManager.getLogger(PostingRepository.class);
  
  @RequestMapping(method = RequestMethod.POST, path = "/user/new")
  public String saveOwner(User u) {
      userRepository.save(u);
      return "New Owner "+ u.getFirstName() + " Saved";
  }
  
//  @RequestMapping(method = RequestMethod.POST, path = "/postings/new")
//  public String savePost(Postings p) {
//	  postingRepository.save(p);
//	  return "New Post " + p.getProjectName() + " Saved";
//  }

//  @RequestMapping(method = RequestMethod.GET, path = "/user/getId")
//  public Collection<user> findOwnerById(@PathVariable("getId") int id) {
//	  	logU.info("Entered into Controller Layer");
//	  	Collection<user> results = userRepository.findById(id);
//	  	return results;
//  }

  
  @RequestMapping(method= RequestMethod.GET, path = "/users")
  public List<User> getallUsers() {
	logU.info("Entered into Controller Layer");
	List<User> results = (List<User>) userRepository.findAll();
	logU.info("Number of records fetched:"+ results.size());
	return results;
		  
  }
  
//  @RequestMapping(method= RequestMethod.GET, path = "/email/{email}")
//  public String findEmail(@PathVariable("email") String email) throws JSONException {
//	  logU.info("Enter into Controller Layer");
//	  Optional<User> results = (Optional<User>) userRepository.findById(email);
//	  User n  = results.get();
//	  JsonObject person = new JsonObject();
//	  person.addProperty("email", n.getEmail());
//	  person.addProperty("password", n.getPassword());
//	  return person.toString();
//  }

    @RequestMapping(method=RequestMethod.GET, path = "users/{email}")
      public  Map<String, String> displayUserInfo(@PathVariable("email")String email) throws JSONException{
    	  logU.info("Enter into Controller Layer");
    	  //TODO find a way to check if email is not there
    	  User n = userRepository.findByEmail(email);
    	  Map<String, String> person = new HashMap<>();
    	  person.put("firstname", n.getFirstName());
    	  person.put("lastname", n.getLastName());
    	  person.put("email", n.getEmail());
    	  person.put("phonenumber", n.getPhoneNumber());
    	  person.put("userid", n.getId().toString());
    	  return person; 
      }
  
  @RequestMapping(method= RequestMethod.GET, path = "/login/{email}&{password}")
  public LoginObject  login(@PathVariable("email") String email,@PathVariable("password") String password) {
	  logU.info("Enter into Controller Layer");
	 
	  User n = userRepository.findByEmailAndPassword(email, password);
	  boolean success = (n != null) ? true : false;
	  if(!success) {
		  return new LoginObject(null, null, null, success);
	  }
	  
	  String firstName = n.getFirstName();
	  String lastName = n.getLastName();
	  String userId = n.getId().toString();


	  return new LoginObject(firstName, lastName, userId, success);
  }
  
  
  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String firstName, @RequestParam String lastName
      , @RequestParam String email, @RequestParam String password, @RequestParam String phone) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
	
    User n = new User();

    n.setFirstName(firstName);
    n.setLastName(lastName);
    n.setEmail(email);
    n.setPassword(password);
    n.setPhoneNumber(phone);
   // n.setLoggedIn(LI);
    userRepository.save(n);
    return "Saved";
  }
  
  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
  
//  @MessageMapping("/chat")
//  @SendTo("/topic/messages")
//  public OutgoingMessage send(Messenger message) throws Exception{
//	  String time = new SimpleDateFormat("HH:mm").format(new Date());
//	  return OutgoingMessage(message.getUserFrom(),message.getMessage(),time);
//  }
  

//private OutgoingMessage OutgoingMessage(User userFrom, String string, String time) {
//	// TODO Auto-generated method stub
//	OutgoingMessage om = new OutgoingMessage(userFrom,string,time);
//	return om;
//}

//private OutgoingMessage OutgoingMessage(User userFrom, String message, String time) {
//	// TODO Auto-generated method stub
//	return null;
//}

@PostMapping(path="/addpost")
  public @ResponseBody String addNewPost( @RequestParam String projectname, 
		  @RequestParam String projectdescription, @RequestParam String neededroles,
		  @RequestParam String compensation, @RequestParam String thumbnailDescription, @RequestParam String userid) {
	  Postings p = new Postings();
	  p.setProjectName(projectname);
	  p.setProjectDescription(projectdescription);
	  p.setNeededRoles(neededroles);
	  p.setCompensation(compensation);
	  
	  p.setThumbnailDescription(thumbnailDescription);
	  p.setUser(userRepository.findByid(Integer.parseInt(userid)));
	  postingRepository.save(p);
	  return "Saved";
  }
//  @PostMapping(path="/login")
//  public String login(@ModelAttribute User user) {
//	  logU.info("Enter into Controller Layer");
//	  String success = "Success"; String failure = "failure";
//	  User n = userRepository.findByEmailAndPassword(user.getEmail(), user.getPassword());
//	  loggedIn LI = loggedIn.FALSE;
//	  if (n != null) {
//		  return success;
//	  }
//	  else {
//		  return null;
//	  }
//  }

//  @PostMapping("/login")
//  public String loginForm(Model model){
//	  model.addAttribute("Located?", new User());
//	  return "Located?"; 
//  }
  
  
  
  @RequestMapping(method= RequestMethod.GET, path="/allposts")
  public @ResponseBody List<Map<String, String>> getAllPosts(){
	  logP.info("Entered into Controller Layer");
	  List<Postings> val = (List<Postings>) postingRepository.findAll();
	  List<Map<String, String>> list = new ArrayList<>();
	  for(Postings p : val) {
		 Map<String, String> e = new HashMap<>();
		 e.put("compensation", p.getCompensation());
		 e.put("neededRoles", p.getNeededRoles());
		 e.put("projectDescription", p.getProjectDescription());
		 e.put("projectName", p.getProjectName());
		 e.put("thumbNail", p.getThumbnailDescription());
		 e.put("ownerId", p.getUser().getId().toString());
		 e.put("ownerName", p.getUser().getFirstName() + p.getUser().getLastName());
		 list.add(e);
	  }
	 
	  logP.info("Number of records fetched:"+ val.size());
	  return list;
  }
  
  
  //This method deletes a post by the given post id
  @RequestMapping(method= RequestMethod.DELETE, path= "/deletepost")
  public void deletePost(@RequestParam Integer id) {
	  
	  if(postingRepository.existsById(id))
		  postingRepository.deleteById(id);
	  

  }
  
  @GetMapping(path="/allpostings")
  public @ResponseBody Iterable<Postings> getAllPostings() {
    // This returns a JSON or XML with the users
    return postingRepository.findAll();
   
  }
  
  //get post by id 
  @GetMapping(path="/getpost")
  public Optional<Postings> getPost(@RequestParam Integer id) {
	  logP.info(id);
	  return postingRepository.findById(id);
  }
  
  
  ImageRepository imageRepository;

	@PostMapping("/upload")
	public @ResponseBody BodyBuilder uplaodImage(@RequestParam("imageFile") MultipartFile file) throws IOException {

		System.out.println("Original Image Byte Size - " + file.getBytes().length);
		imageModel img = new imageModel(file.getOriginalFilename(), file.getContentType(),
				compressBytes(file.getBytes()));
		imageRepository.save(img);
		return (BodyBuilder) ResponseEntity.status(HttpStatus.OK);
	}

	@GetMapping(path = { "/get/{imageName}" })
	public imageModel getImage(@PathVariable("imageName") String imageName) throws IOException {

		final Optional<imageModel> retrievedImage = imageRepository.findByName(imageName);
		imageModel img = new imageModel(retrievedImage.get().getName(), retrievedImage.get().getType(),
				decompressBytes(retrievedImage.get().getPicByte()));
		return img;
	}

	// compress the image bytes before storing it in the database
	public static byte[] compressBytes(byte[] data) {
		Deflater deflater = new Deflater();
		deflater.setInput(data);
		deflater.finish();

		ByteArrayOutputStream outputStream = new ByteArrayOutputStream(data.length);
		byte[] buffer = new byte[1024];
		while (!deflater.finished()) {
			int count = deflater.deflate(buffer);
			outputStream.write(buffer, 0, count);
		}
		try {
			outputStream.close();
		} catch (IOException e) {
		}
		System.out.println("Compressed Image Byte Size - " + outputStream.toByteArray().length);

		return outputStream.toByteArray();
	}

	// uncompress the image bytes before returning it to the angular application
	public static byte[] decompressBytes(byte[] data) {
		Inflater inflater = new Inflater();
		inflater.setInput(data);
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream(data.length);
		byte[] buffer = new byte[1024];
		try {
			while (!inflater.finished()) {
				int count = inflater.inflate(buffer);
				outputStream.write(buffer, 0, count);
			}
			outputStream.close();
		} catch (IOException ioe) {
		} catch (DataFormatException e) {
		}
		return outputStream.toByteArray();
	}

  
}